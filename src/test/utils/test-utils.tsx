/**
 * Custom Testing Utilities
 * Professional-grade testing utilities and data factories
 * Separated from React components to follow react-refresh best practices
 */

import { ReactElement } from 'react';
import {
  render,
  RenderOptions,
  screen,
  fireEvent,
  waitFor,
  waitForElementToBeRemoved,
  within,
  getByRole,
  getByText,
  getByLabelText,
  getByPlaceholderText,
  getByAltText,
  getByDisplayValue,
  queryByRole,
  queryByText,
  queryByLabelText,
  queryByPlaceholderText,
  queryByAltText,
  queryByDisplayValue,
  findByRole,
  findByText,
  findByLabelText,
  findByPlaceholderText,
  findByAltText,
  findByDisplayValue,
  getAllByRole,
  getAllByText,
  getAllByLabelText,
  getAllByPlaceholderText,
  getAllByAltText,
  getAllByDisplayValue,
  queryAllByRole,
  queryAllByText,
  queryAllByLabelText,
  queryAllByPlaceholderText,
  queryAllByAltText,
  queryAllByDisplayValue,
  findAllByRole,
  findAllByText,
  findAllByLabelText,
  findAllByPlaceholderText,
  findAllByAltText,
  findAllByDisplayValue,
  act,
  cleanup,
  renderHook,
} from '@testing-library/react';
import TestProviders from './test-providers';

// Custom render function with providers
const _customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
  render(ui, { wrapper: TestProviders, ...options });

// Export the custom render function
export { _customRender as render };

// Re-export all testing library functions
export {
  screen,
  fireEvent,
  waitFor,
  waitForElementToBeRemoved,
  within,
  getByRole,
  getByText,
  getByLabelText,
  getByPlaceholderText,
  getByAltText,
  getByDisplayValue,
  queryByRole,
  queryByText,
  queryByLabelText,
  queryByPlaceholderText,
  queryByAltText,
  queryByDisplayValue,
  findByRole,
  findByText,
  findByLabelText,
  findByPlaceholderText,
  findByAltText,
  findByDisplayValue,
  getAllByRole,
  getAllByText,
  getAllByLabelText,
  getAllByPlaceholderText,
  getAllByAltText,
  getAllByDisplayValue,
  queryAllByRole,
  queryAllByText,
  queryAllByLabelText,
  queryAllByPlaceholderText,
  queryAllByAltText,
  queryAllByDisplayValue,
  findAllByRole,
  findAllByText,
  findAllByLabelText,
  findAllByPlaceholderText,
  findAllByAltText,
  findAllByDisplayValue,
  act,
  cleanup,
  renderHook,
};

// Test data factories
export const createMockUser = (overrides = {}) => ({
  uid: 'test-user-id',
  email: 'test@example.com',
  displayName: 'Test User',
  photoURL: null,
  emailVerified: true,
  ...overrides,
});

export const createMockProduct = (overrides = {}) => ({
  id: 'test-product-id',
  title: 'Test BMW X5',
  description: 'Test luxury SUV',
  price: 1500000,
  currency: 'EGP' as const,
  category: 'cars' as const,
  subcategory: 'suv',
  images: [
    {
      id: 'img-1',
      url: 'https://example.com/test.jpg',
      alt: 'Test Image',
      isPrimary: true,
      order: 0,
    },
  ],
  vendorId: 'test-vendor-id',
  inStock: true,
  quantity: 1,
  condition: 'used' as const,
  tags: ['bmw', 'luxury', 'suv'],
  specifications: [],
  features: [],
  warranty: {
    type: 'seller' as const,
    duration: 12,
    coverage: 'Test warranty',
  },
  location: {
    governorate: 'Cairo',
    city: 'New Cairo',
  },
  status: 'published' as const,
  views: 0,
  favorites: 0,
  rating: 0,
  reviewCount: 0,
  createdAt: new Date(),
  updatedAt: new Date(),
  // Car-specific details for CarProduct type
  carDetails: {
    make: 'BMW',
    model: 'X5',
    year: 2020,
    mileage: 50000,
    fuelType: 'gasoline' as const,
    transmission: 'automatic' as const,
    bodyType: 'suv' as const,
    engineSize: '3.0L',
    color: 'Black',
    doors: 5,
    seats: 7,
    drivetrain: 'awd' as const,
  },
  ...overrides,
});

// Create a specific car product mock for better type safety
export const createMockCarProduct = (overrides = {}) =>
  createMockProduct({
    category: 'cars',
    subcategory: 'suv',
    carDetails: {
      make: 'BMW',
      model: 'X5',
      year: 2020,
      mileage: 50000,
      fuelType: 'gasoline' as const,
      transmission: 'automatic' as const,
      bodyType: 'suv' as const,
      engineSize: '3.0L',
      color: 'Black',
      doors: 5,
      seats: 7,
      drivetrain: 'awd' as const,
    },
    ...overrides,
  });

export const createMockVendor = (overrides = {}) => ({
  id: 'test-vendor-id',
  userId: 'test-user-id',
  businessName: 'Test Motors',
  businessType: 'dealership' as const,
  description: 'Test automotive dealer',
  contactPerson: 'Test Person',
  email: 'vendor@test.com',
  phoneNumber: '01234567890',
  address: {
    street: 'Test Street',
    city: 'Cairo',
    governorate: 'Cairo',
    country: 'Egypt',
  },
  rating: 4.5,
  totalReviews: 100,
  totalSales: 50,
  totalProducts: 25,
  joinedDate: new Date(),
  lastActive: new Date(),
  isVerified: true,
  createdAt: new Date(),
  updatedAt: new Date(),
  ...overrides,
});
