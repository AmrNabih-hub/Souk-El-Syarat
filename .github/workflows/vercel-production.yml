# 🚀 Vercel Production Deployment
# Professional CI/CD for Souk El-Sayarat with Supabase

name: 🚀 Vercel Production Deployment

on:
  push:
    branches: [ production, main ]
  workflow_dispatch:

env:
  CI: true
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building for production..."
          npm run build
          
          # Verify build
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
          echo "📊 Build artifacts:"
          ls -la dist/
          du -sh dist/*

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  deploy-production:
    name: 🚀 Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [quality-check, build]
    timeout-minutes: 15
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: 🚀 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        run: |
          echo "🚀 Deploying to Vercel Production..."
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$URL" >> $GITHUB_OUTPUT
          echo "✅ Deployed to: $URL"
        id: deploy

      - name: 🔍 Health Check
        run: |
          echo "🔍 Performing health check..."
          sleep 10
          curl -f "${{ steps.deploy.outputs.deployment_url }}" || echo "⚠️ Health check failed but deployment completed"

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Production URL: ${{ steps.deploy.outputs.deployment_url }}"
          echo "📅 Deployed at: $(date)"
          echo "🔧 Environment: production"
          echo "📦 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"

  post-deployment:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "Generated: $(date)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Deployment Status" >> deployment-report.md
          echo "- Quality Check: ${{ needs.quality-check.result }}" >> deployment-report.md
          echo "- Build: ${{ needs.build.result }}" >> deployment-report.md
          echo "- Deploy: ${{ needs.deploy-production.result }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Project Information" >> deployment-report.md
          echo "- Repository: ${{ github.repository }}" >> deployment-report.md
          echo "- Branch: ${{ github.ref_name }}" >> deployment-report.md
          echo "- Commit: ${{ github.sha }}" >> deployment-report.md

      - name: 💾 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 30

      - name: 📧 Notify on failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ DEPLOYMENT FAILED"
          echo "Please check the logs and try again."