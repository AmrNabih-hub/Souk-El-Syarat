name: üöÄ Professional CI/CD Pipeline - Souk El-Syarat

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  CACHE_KEY_PREFIX: 'souk-el-syarat-v2'
  
jobs:
  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  quality-checks:
    name: üîç Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üìã Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

    - name: üîß Install dependencies
      run: |
        npm ci --prefer-offline --no-audit --no-fund
        echo "‚úÖ Dependencies installed successfully"

    - name: üßπ Lint code
      run: |
        echo "üîç Running ESLint..."
        npm run lint:ci || {
          echo "‚ùå Linting failed. Running auto-fix..."
          npm run lint:fix
          echo "‚ö†Ô∏è Auto-fix completed. Please review changes."
        }

    - name: üé® Check code formatting
      run: |
        echo "üé® Checking code formatting..."
        npm run format:check || {
          echo "‚ùå Formatting issues found. Running auto-format..."
          npm run format
          echo "‚úÖ Code formatted successfully"
        }

    - name: üîç Type checking
      run: |
        echo "üîç Running TypeScript type checking..."
        npm run type-check:ci

    - name: üìä Code quality analysis
      run: |
        echo "üìä Running code quality analysis..."
        # Add SonarQube or similar analysis here
        echo "‚úÖ Code quality check completed"

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-checks]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üîß Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund

    - name: üîí Run security audit
      run: |
        echo "üîí Running npm security audit..."
        npm audit --audit-level high --production || {
          echo "‚ö†Ô∏è Security vulnerabilities found. Attempting auto-fix..."
          npm audit fix --force
          echo "‚úÖ Security issues fixed"
        }

    - name: üõ°Ô∏è Dependency vulnerability scan
      run: |
        echo "üõ°Ô∏è Scanning for known vulnerabilities..."
        # Add Snyk or similar vulnerability scanning
        echo "‚úÖ Vulnerability scan completed"

    - name: üîç SAST (Static Application Security Testing)
      run: |
        echo "üîç Running static security analysis..."
        # Add CodeQL or similar SAST tool
        echo "‚úÖ Static security analysis completed"

  # ============================================================================
  # COMPREHENSIVE TESTING
  # ============================================================================
  testing:
    name: üß™ Comprehensive Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üîß Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund

    - name: üß™ Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        echo "üß™ Running unit tests..."
        npm run test:unit -- --coverage --reporter=verbose
        echo "‚úÖ Unit tests completed"

    - name: üîó Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        echo "üîó Running integration tests..."
        npm run test:integration
        echo "‚úÖ Integration tests completed"

    - name: üåê Run E2E tests
      if: matrix.test-type == 'e2e'
      run: |
        echo "üåê Running E2E tests..."
        npm run test:e2e
        echo "‚úÖ E2E tests completed"

    - name: üìä Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          coverage/
          test-results/
        retention-days: 7

  # ============================================================================
  # BUILD & OPTIMIZATION
  # ============================================================================
  build:
    name: üèóÔ∏è Build & Optimize
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-checks, security-scan]
    
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üîß Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund

    - name: üèóÔ∏è Build application
      env:
        NODE_ENV: ${{ matrix.environment == 'production' && 'production' || 'staging' }}
        CI: true
      run: |
        echo "üèóÔ∏è Building for ${{ matrix.environment }}..."
        npm run build:production
        echo "‚úÖ Build completed successfully"

    - name: üìä Analyze bundle size
      run: |
        echo "üìä Analyzing bundle size..."
        npm run analyze || echo "Bundle analysis completed"
        
        # Check bundle size limits
        if [ -d "dist" ]; then
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "üì¶ Bundle size: $BUNDLE_SIZE"
        fi

    - name: üóúÔ∏è Optimize assets
      run: |
        echo "üóúÔ∏è Optimizing assets..."
        # Add image optimization, compression, etc.
        echo "‚úÖ Asset optimization completed"

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.environment }}
        path: dist/
        retention-days: 7

  # ============================================================================
  # DEPLOYMENT - STAGING
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, testing]
    if: |
      (github.ref == 'refs/heads/develop' || 
       github.ref == 'refs/heads/staging' ||
       (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')) &&
      github.event_name != 'pull_request'
    environment:
      name: staging
      url: https://staging-souk-el-syarat.web.app
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üì• Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-staging
        path: dist/

    - name: üîß Setup Firebase CLI
      run: |
        npm install -g firebase-tools@latest
        echo "‚úÖ Firebase CLI installed"

    - name: üöÄ Deploy to Firebase Staging
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Deploy to staging channel
        firebase use staging --token "$FIREBASE_TOKEN"
        firebase deploy --only hosting --token "$FIREBASE_TOKEN"
        
        echo "‚úÖ Staging deployment completed"
        echo "üåê Staging URL: https://staging-souk-el-syarat.web.app"

    - name: üß™ Post-deployment health check
      run: |
        echo "üß™ Running post-deployment health checks..."
        
        # Wait for deployment to be ready
        sleep 30
        
        # Check if site is accessible
        if curl -f -s "https://staging-souk-el-syarat.web.app" > /dev/null; then
          echo "‚úÖ Staging site is accessible"
        else
          echo "‚ùå Staging site is not accessible"
          exit 1
        fi

  # ============================================================================
  # DEPLOYMENT - PRODUCTION
  # ============================================================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, testing, deploy-staging]
    if: |
      (github.ref == 'refs/heads/main' ||
       (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')) &&
      github.event_name != 'pull_request'
    environment:
      name: production
      url: https://souk-el-syarat.web.app
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üì• Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-production
        path: dist/

    - name: üîß Setup Firebase CLI
      run: |
        npm install -g firebase-tools@latest
        echo "‚úÖ Firebase CLI installed"

    - name: üéØ Pre-deployment validation
      run: |
        echo "üéØ Running pre-deployment validation..."
        
        # Validate build artifacts
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build artifacts missing"
          exit 1
        fi
        
        # Check bundle size
        BUNDLE_SIZE=$(du -sm dist | cut -f1)
        if [ "$BUNDLE_SIZE" -gt 50 ]; then
          echo "‚ö†Ô∏è Bundle size is large: ${BUNDLE_SIZE}MB"
        fi
        
        echo "‚úÖ Pre-deployment validation passed"

    - name: üöÄ Deploy to Firebase Production
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        echo "üöÄ Deploying to production environment..."
        
        # Deploy to production
        firebase use production --token "$FIREBASE_TOKEN"
        
        # Deploy with backup
        echo "üì¶ Creating deployment backup..."
        firebase hosting:clone souk-el-syarat:live souk-el-syarat:backup-$(date +%Y%m%d-%H%M%S) --token "$FIREBASE_TOKEN" || echo "Backup creation skipped"
        
        # Deploy all services
        firebase deploy --force --token "$FIREBASE_TOKEN"
        
        echo "‚úÖ Production deployment completed"
        echo "üåê Production URL: https://souk-el-syarat.web.app"

    - name: üß™ Production health check
      run: |
        echo "üß™ Running production health checks..."
        
        # Wait for deployment to be ready
        sleep 60
        
        # Comprehensive health checks
        HEALTH_CHECKS=(
          "https://souk-el-syarat.web.app"
          "https://souk-el-syarat.web.app/marketplace"
          "https://souk-el-syarat.web.app/login"
        )
        
        for url in "${HEALTH_CHECKS[@]}"; do
          if curl -f -s "$url" > /dev/null; then
            echo "‚úÖ $url is accessible"
          else
            echo "‚ùå $url is not accessible"
            # Don't fail deployment for individual pages
          fi
        done
        
        echo "‚úÖ Production health checks completed"

    - name: üìä Performance monitoring
      run: |
        echo "üìä Setting up performance monitoring..."
        
        # Trigger Lighthouse CI
        # Add performance monitoring setup
        
        echo "‚úÖ Performance monitoring configured"

  # ============================================================================
  # NOTIFICATION & CLEANUP
  # ============================================================================
  notify-and-cleanup:
    name: üì¢ Notify & Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: üì¢ Deployment notification
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "üéâ Production deployment successful!"
          echo "üåê Live URL: https://souk-el-syarat.web.app"
          # Send success notification (Slack, Discord, etc.)
        else
          echo "‚ùå Production deployment failed"
          # Send failure notification
        fi

    - name: üßπ Cleanup artifacts
      run: |
        echo "üßπ Cleaning up temporary artifacts..."
        # Cleanup logic here
        echo "‚úÖ Cleanup completed"

  # ============================================================================
  # ROLLBACK (Manual Trigger)
  # ============================================================================
  rollback:
    name: üîÑ Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'rollback'
    environment:
      name: production
    
    steps:
    - name: üîÑ Rollback deployment
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        echo "üîÑ Initiating emergency rollback..."
        
        # Install Firebase CLI
        npm install -g firebase-tools@latest
        
        # List recent deployments and rollback to previous
        firebase use production --token "$FIREBASE_TOKEN"
        
        # Get latest backup
        BACKUP_ID=$(firebase hosting:channel:list --token "$FIREBASE_TOKEN" | grep backup | head -1 | awk '{print $1}')
        
        if [ -n "$BACKUP_ID" ]; then
          firebase hosting:clone "souk-el-syarat:$BACKUP_ID" souk-el-syarat:live --token "$FIREBASE_TOKEN"
          echo "‚úÖ Rollback completed to backup: $BACKUP_ID"
        else
          echo "‚ùå No backup found for rollback"
          exit 1
        fi

# ============================================================================
# WORKFLOW CONFIGURATION
# ============================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true