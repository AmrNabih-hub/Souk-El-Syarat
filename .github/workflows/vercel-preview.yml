# 🔄 Vercel Preview Deployment
# Automatic preview deployments for pull requests

name: 🔄 Vercel Preview Deployment

on:
  pull_request:
    branches: [ production, main ]
  push:
    branches: [ develop, staging ]

env:
  CI: true
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        continue-on-error: true
        run: npm run lint

      - name: 📝 Type check
        continue-on-error: true
        run: npm run type-check

      - name: 🧪 Run tests
        continue-on-error: true
        run: npm run test

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building for preview..."
          npm run build
          
          # Verify build
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          
          echo "✅ Build completed successfully"

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: preview-build-artifacts
          path: dist/
          retention-days: 3

  deploy-preview:
    name: 🔄 Deploy Preview to Vercel
    runs-on: ubuntu-latest
    needs: [quality-check, build]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: preview-build-artifacts
          path: dist/

      - name: 🚀 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔄 Deploy Preview to Vercel
        run: |
          echo "🔄 Deploying preview to Vercel..."
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$URL" >> $GITHUB_OUTPUT
          echo "✅ Preview deployed to: $URL"
        id: deploy

      - name: 💬 Comment Preview URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔄 Preview Deployment')
            );

            const body = `## 🔄 Preview Deployment
            
            ✅ **Preview deployed successfully!**
            
            🌐 **Preview URL**: ${{ steps.deploy.outputs.preview_url }}
            
            📊 **Deployment Details**:
            - **Commit**: \`${{ github.sha }}\`
            - **Branch**: \`${{ github.head_ref }}\`
            - **Quality Check**: ${{ needs.quality-check.result }}
            - **Build**: ${{ needs.build.result }}
            
            🚀 Test your changes on the preview deployment before merging!`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: 📊 Preview Summary
        run: |
          echo "🔄 PREVIEW DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Preview URL: ${{ steps.deploy.outputs.preview_url }}"
          echo "📅 Deployed at: $(date)"
          echo "🔧 Environment: preview"
          echo "📦 Branch: ${{ github.ref_name }}"