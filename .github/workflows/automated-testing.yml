# 🧪 **AUTOMATED TESTING WORKFLOW**
# Comprehensive Testing Automation for Souk El-Sayarat

name: 🧪 Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  FIREBASE_PROJECT_ID: 'demo-souk-elsayarat'

jobs:
  # 🔬 **UNIT TESTING**
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: |
          npm run test:unit -- --run --coverage --reporter=verbose
          npm run test:unit -- --run --reporter=json --outputFile=unit-test-results.json

      - name: 📊 Generate Coverage Report
        run: |
          npm run coverage:report
          npm run coverage:badges

      - name: 📤 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: |
            unit-test-results.json
            coverage/

  # 🔗 **INTEGRATION TESTING**
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    services:
      firebase-emulator:
        image: andreysenov/firebase-tools
        ports:
          - 9099:9099  # Auth Emulator
          - 8080:8080  # Firestore Emulator
          - 9199:9199  # Storage Emulator
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔥 Setup Firebase Emulators
        run: |
          npm install -g firebase-tools
          firebase setup:emulators:firestore
          firebase setup:emulators:auth
          firebase setup:emulators:storage

      - name: 🚀 Start Firebase Emulators
        run: |
          firebase emulators:start --project ${{ env.FIREBASE_PROJECT_ID }} --only firestore,auth,storage &
          sleep 15
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: 🔗 Run Integration Tests
        run: |
          npm run test:integration -- --run --coverage --reporter=verbose
          npm run test:integration -- --run --reporter=json --outputFile=integration-test-results.json
        env:
          REACT_APP_USE_EMULATORS: true
          REACT_APP_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            integration-test-results.json
            coverage/

  # 🌐 **END-TO-END TESTING**
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔧 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Start Application
        run: |
          npm run build
          npm run preview &
          sleep 10
        env:
          CI: true

      - name: 🔥 Start Firebase Emulators
        run: |
          npm install -g firebase-tools
          firebase emulators:start --project ${{ env.FIREBASE_PROJECT_ID }} &
          sleep 15
        env:
          REACT_APP_USE_EMULATORS: true

      - name: 🌐 Run E2E Tests
        run: |
          npm run test:e2e -- --reporter=html
          npm run test:e2e -- --reporter=json --outputFile=e2e-test-results.json

      - name: 📤 Upload E2E Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e-test-results.json
            playwright-report/
            test-results/

  # 📱 **MOBILE TESTING**
  mobile-tests:
    name: 📱 Mobile & Responsive Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: ['iPhone 13', 'Pixel 5', 'iPad Air']
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔧 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Start Application
        run: |
          npm run build
          npm run preview &
          sleep 10

      - name: 📱 Run Mobile Tests
        run: |
          npm run test:mobile -- --device="${{ matrix.device }}" --reporter=json --outputFile=mobile-test-${{ matrix.device }}.json

      - name: 📤 Upload Mobile Test Results
        uses: actions/upload-artifact@v3
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: mobile-test-${{ matrix.device }}.json

  # ⚡ **PERFORMANCE TESTING**
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🚀 Build Application
        run: npm run build

      - name: ⚡ Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Bundle Size Analysis
        run: |
          npm run analyze
          npm run bundle:size-limit

      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            lighthouse-results/
            bundle-analyzer-report.html

  # 🔒 **SECURITY TESTING**
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Dependency Security Audit
        run: |
          npm audit --audit-level=moderate --json > security-audit.json
          npm run security:check

      - name: 🛡️ OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security-audit.json
            report_html.html
            report_md.md

  # 📊 **TEST REPORTING**
  test-reporting:
    name: 📊 Test Reporting
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, mobile-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download All Test Results
        uses: actions/download-artifact@v3

      - name: 📊 Generate Comprehensive Report
        run: |
          mkdir -p test-reports
          
          # Combine all test results
          echo "# 🧪 Comprehensive Test Report" > test-reports/summary.md
          echo "Generated: $(date)" >> test-reports/summary.md
          echo "" >> test-reports/summary.md
          
          # Process each test type
          echo "## Unit Tests" >> test-reports/summary.md
          echo "## Integration Tests" >> test-reports/summary.md
          echo "## E2E Tests" >> test-reports/summary.md
          echo "## Mobile Tests" >> test-reports/summary.md
          echo "## Performance Tests" >> test-reports/summary.md
          echo "## Security Tests" >> test-reports/summary.md

      - name: 📤 Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test-reports/

      - name: 📧 Notify Test Results
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#testing'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🧪 **Test Suite Complete**
            - Unit Tests: ${{ needs.unit-tests.result }}
            - Integration Tests: ${{ needs.integration-tests.result }}
            - E2E Tests: ${{ needs.e2e-tests.result }}
            - Mobile Tests: ${{ needs.mobile-tests.result }}
            - Performance Tests: ${{ needs.performance-tests.result }}
            - Security Tests: ${{ needs.security-tests.result }}
