# 🔍 **CODE QUALITY & SECURITY AUTOMATION**
# Professional Code Quality and Security Scanning for Souk El-Sayarat

name: 🔍 Code Quality & Security

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18.x'

jobs:
  # 📊 **CODE QUALITY ANALYSIS**
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 ESLint Analysis
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json
          npm run lint -- --format=checkstyle --output-file=eslint-checkstyle.xml
        continue-on-error: true

      - name: 🎨 Prettier Format Check
        run: |
          npm run format:check
          echo "format_status=$?" >> $GITHUB_ENV

      - name: 📊 TypeScript Strict Check
        run: |
          npx tsc --noEmit --strict
          echo "typescript_status=$?" >> $GITHUB_ENV

      - name: 🔍 Code Complexity Analysis
        run: |
          npx complexity-report --format json --output complexity-report.json src/
          npx complexity-report --format html --output complexity-report.html src/

      - name: 📈 Code Coverage Analysis
        run: |
          npm run test:coverage
          npm run coverage:threshold

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📤 Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            eslint-checkstyle.xml
            complexity-report.*
            coverage/

      - name: 📧 Quality Report Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#code-quality'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🔍 **Code Quality Issues Detected**
            
            📊 **Issues Found:**
            - ESLint: Check report for details
            - Format: ${{ env.format_status == '0' && 'PASS' || 'FAIL' }}
            - TypeScript: ${{ env.typescript_status == '0' && 'PASS' || 'FAIL' }}
            
            🔧 **Action Required:** Fix code quality issues before merge

  # 🛡️ **DEPENDENCY SECURITY AUDIT**
  dependency-security:
    name: 🛡️ Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 NPM Security Audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json
          npm audit --audit-level=moderate --parseable > npm-audit.txt
        continue-on-error: true

      - name: 🔍 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: 🔍 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Souk El-Sayarat'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --out dependency-check-report

      - name: 📊 License Compliance Check
        run: |
          npx license-checker --json --out license-report.json
          npx license-checker --csv --out license-report.csv

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-security-reports
          path: |
            npm-audit.*
            snyk-report.json
            dependency-check-report/
            license-report.*

      - name: 🚨 Security Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🛡️ **SECURITY ALERT: Vulnerable Dependencies**
            
            🚨 **High/Critical vulnerabilities found in dependencies**
            
            🔧 **Action Required:** 
            - Review security reports
            - Update vulnerable packages
            - Apply security patches

  # 🔐 **STATIC APPLICATION SECURITY TESTING (SAST)**
  sast-scan:
    name: 🔐 SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 CodeQL Security Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: 🏗️ Build Application
        run: |
          npm ci
          npm run build

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🔍 ESLint Security Rules
        run: |
          npm install eslint-plugin-security --save-dev
          npx eslint --ext .js,.jsx,.ts,.tsx --config .eslintrc-security.js src/ --format json --output-file eslint-security.json
        continue-on-error: true

      - name: 🔍 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
          generateSarif: "1"

      - name: 📤 Upload SAST Results
        uses: actions/upload-artifact@v3
        with:
          name: sast-security-reports
          path: |
            eslint-security.json
            semgrep.sarif

  # 🔒 **SECRETS SCANNING**
  secrets-scan:
    name: 🔒 Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Detect Secrets Scan
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

      - name: 🚨 Secrets Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🔒 **CRITICAL SECURITY ALERT: Secrets Detected**
            
            🚨 **Potential secrets found in code repository**
            
            🛠️ **IMMEDIATE ACTION REQUIRED:**
            - Review detected secrets
            - Remove sensitive data from repository
            - Rotate compromised credentials
            - Update security policies

  # 🌐 **DYNAMIC APPLICATION SECURITY TESTING (DAST)**
  dast-scan:
    name: 🌐 DAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🚀 Start Application
        run: |
          npm ci
          npm run build
          npm run preview &
          sleep 30
        env:
          CI: true

      - name: 🔍 OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: 🔍 Nuclei Vulnerability Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:4173'
          templates: 'vulnerabilities,exposures,misconfiguration'

      - name: 📤 Upload DAST Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dast-security-reports
          path: |
            report_html.html
            report_json.json
            nuclei-results.json

  # 🔐 **INFRASTRUCTURE SECURITY**
  infrastructure-security:
    name: 🔐 Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Dockerfile Security Scan
        if: hashFiles('Dockerfile') != ''
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: 🔍 Firebase Security Rules Check
        run: |
          # Check Firebase security rules
          echo "🔍 Analyzing Firebase security rules..."
          
          if [ -f "firestore.rules" ]; then
            echo "✅ Firestore rules found"
            # Add custom security rules analysis here
          else
            echo "❌ Firestore rules missing"
          fi
          
          if [ -f "storage.rules" ]; then
            echo "✅ Storage rules found"
          else
            echo "❌ Storage rules missing"
          fi

      - name: 🔍 Terraform Security Scan
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Infrastructure Reports
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-security-reports
          path: |
            hadolint-results.sarif
            trivy-results.sarif

  # 📊 **SECURITY REPORTING**
  security-reporting:
    name: 📊 Security Reporting
    runs-on: ubuntu-latest
    needs: [dependency-security, sast-scan, secrets-scan, dast-scan, infrastructure-security]
    if: always()
    steps:
      - name: 📥 Download All Security Reports
        uses: actions/download-artifact@v3

      - name: 📊 Generate Security Summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results" >> security-summary.md
          echo "- Dependency Security: ${{ needs.dependency-security.result }}" >> security-summary.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- DAST Scan: ${{ needs.dast-scan.result }}" >> security-summary.md
          echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md

      - name: 📤 Upload Security Summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: security-summary.md

      - name: 📧 Security Report Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🔒 **Security Scan Complete**
            
            📊 **Results:**
            - Dependency Security: ${{ needs.dependency-security.result }}
            - SAST Scan: ${{ needs.sast-scan.result }}
            - Secrets Scan: ${{ needs.secrets-scan.result }}
            - DAST Scan: ${{ needs.dast-scan.result }}
            - Infrastructure Security: ${{ needs.infrastructure-security.result }}
            
            📈 **Overall Status:** ${{ job.status }}
