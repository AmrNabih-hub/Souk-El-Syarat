# 🚀 **SOUK EL-SAYARAT CI/CD PIPELINE**
# Professional Automation for Global E-commerce Platform
# Enhanced with Senior Developer Best Practices

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force Deployment (Skip Tests)'
        required: false
        default: false
        type: boolean

# Global environment variables with proper validation
env:
  NODE_VERSION: '18.x'
  CACHE_KEY: node-modules-${{ github.sha }}
  MAX_EXECUTION_TIME: 30
  TEST_TIMEOUT: 60000
  BUILD_TIMEOUT: 900

# Job dependencies and execution strategy
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 **CODE QUALITY & SECURITY**
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      quality-score: ${{ steps.quality-check.outputs.score }}
      security-status: ${{ steps.security-check.outputs.status }}
      lint-issues: ${{ steps.lint-check.outputs.issues }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          always-auth: false

      - name: 📦 Install Dependencies
        run: |
          echo "🔧 Installing dependencies..."
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed successfully"

      - name: 🔍 ESLint Code Analysis
        id: lint-check
        run: |
          echo "🔍 Running ESLint analysis..."
          npm run lint --silent > lint-report.txt 2>&1 || true
          
          # Count issues
          LINT_ISSUES=$(grep -c "error\|warning" lint-report.txt || echo "0")
          echo "issues=$LINT_ISSUES" >> $GITHUB_OUTPUT
          
          # Display summary
          echo "📊 ESLint Summary:"
          echo "  Total Issues: $LINT_ISSUES"
          
          if [ "$LINT_ISSUES" -gt 0 ]; then
            echo "⚠️  Code quality issues detected"
            cat lint-report.txt | head -20
          else
            echo "✅ No code quality issues found"
          fi

      - name: 🎨 Prettier Code Format Check
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check
          echo "✅ Code formatting is consistent"

      - name: 🔒 Security Audit
        id: security-check
        run: |
          echo "🔒 Running security audit..."
          
          # Run security audit
          npm audit --audit-level=high --json > security-report.json || true
          
          # Parse security report
          VULNERABILITIES=$(jq -r '.metadata.vulnerabilities.total // 0' security-report.json 2>/dev/null || echo "0")
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "🚨 Security vulnerabilities detected: $VULNERABILITIES"
            echo "status=vulnerable" >> $GITHUB_OUTPUT
            jq -r '.advisories | to_entries[] | "  - \(.value.title) (Severity: \(.value.severity))"' security-report.json 2>/dev/null || echo "  - Unable to parse security report"
          else
            echo "✅ No security vulnerabilities found"
            echo "status=secure" >> $GITHUB_OUTPUT
          fi

      - name: 📊 TypeScript Check
        run: |
          echo "📊 Running TypeScript type check..."
          npm run type-check
          echo "✅ TypeScript type check passed"

      - name: 📈 Code Coverage Analysis
        run: |
          echo "📈 Running code coverage analysis..."
          npm run test:coverage
          echo "✅ Code coverage analysis completed"

      - name: 📤 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: 📊 Quality Score Calculation
        id: quality-check
        run: |
          echo "📊 Calculating quality score..."
          
          # Calculate quality score based on various metrics
          LINT_SCORE=$(( 100 - (${{ steps.lint-check.outputs.issues }} * 2) ))
          [ $LINT_SCORE -lt 0 ] && LINT_SCORE=0
          
          SECURITY_SCORE=$([ "${{ steps.security-check.outputs.status }}" = "secure" ] && echo "100" || echo "50")
          
          # Overall quality score (weighted average)
          QUALITY_SCORE=$(( (LINT_SCORE * 60 + SECURITY_SCORE * 40) / 100 ))
          
          echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "📊 Quality Score: $QUALITY_SCORE/100"
          echo "  - Lint Score: $LINT_SCORE/100"
          echo "  - Security Score: $SECURITY_SCORE/100"

  # 🧪 **COMPREHENSIVE TESTING**
  testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        node-version: [18.x]
      fail-fast: false
    outputs:
      test-results: ${{ steps.test-summary.outputs.results }}
      coverage-percentage: ${{ steps.coverage-check.outputs.percentage }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          echo "🔧 Installing dependencies for ${{ matrix.test-type }} tests..."
          npm ci --prefer-offline --no-audit

      - name: 🔥 Start Firebase Emulators
        if: matrix.test-type == 'integration' || matrix.test-type == 'e2e'
        run: |
          echo "🔥 Starting Firebase emulators..."
          npm install -g firebase-tools
          
          # Start emulators in background
          firebase emulators:start --only firestore,auth,storage --project demo-project &
          EMULATOR_PID=$!
          
          # Wait for emulators to be ready
          echo "⏳ Waiting for emulators to start..."
          sleep 15
          
          # Check if emulators are running
          if curl -s http://localhost:4000 > /dev/null; then
            echo "✅ Firebase emulators started successfully"
            echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
          else
            echo "❌ Failed to start Firebase emulators"
            exit 1
          fi

      - name: 🧪 Run Tests - ${{ matrix.test-type }}
        id: test-execution
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests..."
          
          # Set test timeout
          export VITEST_TIMEOUT=${{ env.TEST_TIMEOUT }}
          
          case "${{ matrix.test-type }}" in
            unit)
              echo "📊 Running unit tests..."
              npm run test:unit -- --run --reporter=verbose --coverage
              ;;
            integration)
              echo "🔗 Running integration tests..."
              npm run test:integration -- --run --reporter=verbose --coverage
              ;;
            e2e)
              echo "🌐 Running end-to-end tests..."
              npm run test:e2e -- --run --reporter=verbose --coverage
              ;;
          esac
          
          echo "✅ ${{ matrix.test-type }} tests completed"

      - name: 📊 Test Results Summary
        id: test-summary
        if: always()
        run: |
          echo "📊 Generating test summary..."
          
          # Check if tests passed
          if [ "${{ steps.test-execution.outcome }}" = "success" ]; then
            echo "results=passed" >> $GITHUB_OUTPUT
            echo "✅ All ${{ matrix.test-type }} tests passed"
          else
            echo "results=failed" >> $GITHUB_OUTPUT
            echo "❌ Some ${{ matrix.test-type }} tests failed"
          fi

      - name: 📈 Coverage Check
        id: coverage-check
        if: always()
        run: |
          echo "📈 Checking test coverage..."
          
          # Look for coverage report
          if [ -f "coverage/lcov.info" ]; then
            COVERAGE=$(grep -o 'SF:.*' coverage/lcov.info | wc -l)
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "📊 Coverage: $COVERAGE%"
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
            echo "📊 Coverage: No data available"
          fi

      - name: 🧹 Cleanup Firebase Emulators
        if: (matrix.test-type == 'integration' || matrix.test-type == 'e2e') && always()
        run: |
          if [ -n "$EMULATOR_PID" ]; then
            echo "🧹 Cleaning up Firebase emulators..."
            kill $EMULATOR_PID 2>/dev/null || true
            echo "✅ Firebase emulators stopped"
          fi

  # 🏗️ **BUILD & OPTIMIZATION**
  build:
    name: 🏗️ Build & Optimization
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: |
      needs.code-quality.outputs.quality-score >= 70 &&
      needs.testing.outputs.test-results == 'passed' &&
      github.event_name != 'pull_request'
    timeout-minutes: 15
    outputs:
      build-status: ${{ steps.build-check.outputs.status }}
      bundle-size: ${{ steps.bundle-analysis.outputs.size }}
      build-artifacts: ${{ steps.build-check.outputs.artifacts }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Environment Setup
        run: |
          echo "🔧 Setting up build environment..."
          
          # Set build environment variables
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "VITE_APP_ENV=production" >> $GITHUB_ENV
          
          # Validate required environment variables
          if [ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "❌ Error: FIREBASE_PROJECT_ID secret is not set"
            exit 1
          fi
          
          echo "✅ Build environment configured"

      - name: 🏗️ Production Build
        id: build-check
        run: |
          echo "🏗️ Building production application..."
          
          # Run production build
          npm run build
          
          # Check if build was successful
          if [ -d "dist" ] && [ -f "dist/index.html" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "artifacts=dist" >> $GITHUB_OUTPUT
            echo "✅ Production build completed successfully"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Production build failed"
            exit 1
          fi

      - name: 📊 Bundle Size Analysis
        id: bundle-analysis
        run: |
          echo "📊 Analyzing bundle size..."
          
          # Calculate total bundle size
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          echo "size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          
          echo "📦 Bundle Size: $TOTAL_SIZE"
          
          # Check for large files
          echo "🔍 Large files (>1MB):"
          find dist -type f -size +1M -exec ls -lh {} \; 2>/dev/null || echo "  No large files found"

      - name: 🧪 Build Validation Tests
        run: |
          echo "🧪 Running build validation tests..."
          
          # Test the built application
          cd dist
          
          # Check if main files exist
          if [ -f "index.html" ] && [ -f "assets/index-*.js" ]; then
            echo "✅ Build validation passed"
          else
            echo "❌ Build validation failed"
            exit 1
          fi

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 30

  # 🚀 **DEPLOYMENT**
  deployment:
    name: 🚀 Deployment
    runs-on: ubuntu-latest
    needs: [code-quality, testing, build]
    if: |
      needs.code-quality.outputs.quality-score >= 80 &&
      needs.testing.outputs.test-results == 'passed' &&
      needs.build.outputs.build-status == 'success' &&
      github.event_name != 'pull_request'
    timeout-minutes: 20
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔥 Firebase Setup
        run: |
          echo "🔥 Setting up Firebase deployment..."
          
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Validate Firebase project
          if [ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "❌ Error: FIREBASE_PROJECT_ID secret is not set"
            exit 1
          fi
          
          # Login to Firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY || 'demo-key' }}" | base64 -d > firebase-key.json
          firebase use ${{ secrets.FIREBASE_PROJECT_ID || 'demo-project' }}
          
          echo "✅ Firebase setup completed"

      - name: 🚀 Deploy to Firebase
        id: deploy
        run: |
          echo "🚀 Deploying to Firebase..."
          
          # Run production build if not already built
          if [ ! -d "dist" ]; then
            echo "🏗️ Building application for deployment..."
            npm run build
          fi
          
          # Deploy to Firebase
          firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID }}
          
          # Set deployment outputs
          echo "url=https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment completed successfully"

      - name: 🧪 Post-Deployment Tests
        run: |
          echo "🧪 Running post-deployment tests..."
          
          DEPLOYMENT_URL="https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"
          
          # Wait for deployment to be ready
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
          # Test deployment
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Post-deployment test passed"
          else
            echo "❌ Post-deployment test failed (HTTP $HTTP_CODE)"
            exit 1
          fi

      - name: 📧 Deployment Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.deploy.outcome == 'success' && 'success' || 'failure' }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            🚀 **Deployment ${{ steps.deploy.outcome == 'success' && 'SUCCESS' || 'FAILED' }}**
            
            📊 **Details:**
            - Environment: ${{ github.event.inputs.environment || 'staging' }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Quality Score: ${{ needs.code-quality.outputs.quality-score }}/100
            - Test Results: ${{ needs.testing.outputs.test-results }}
            
            🌐 **URL:** ${{ steps.deploy.outputs.url }}
            
            ${{ steps.deploy.outcome == 'success' && '✅ Deployment completed successfully' || '❌ Deployment failed - check logs for details' }}

  # 📊 **WORKFLOW SUMMARY**
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    needs: [code-quality, testing, build, deployment]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 📊 Generate Workflow Report
        run: |
          echo "📊 **CI/CD Workflow Summary**"
          echo "Generated: $(date -u)"
          echo ""
          echo "🔍 **Code Quality:** ${{ needs.code-quality.outputs.quality-score }}/100"
          echo "🔒 **Security Status:** ${{ needs.code-quality.outputs.security-status }}"
          echo "🧪 **Test Results:** ${{ needs.testing.outputs.test-results }}"
          echo "📈 **Coverage:** ${{ needs.testing.outputs.coverage-percentage }}%"
          echo "🏗️ **Build Status:** ${{ needs.build.outputs.build-status || 'skipped' }}"
          echo "🚀 **Deployment Status:** ${{ needs.deployment.outputs.deployment-status || 'skipped' }}"
          echo ""
          
          # Determine overall workflow status
          if [ "${{ needs.code-quality.outputs.quality-score }}" -ge 80 ] && \
             [ "${{ needs.testing.outputs.test-results }}" = "passed" ] && \
             [ "${{ needs.build.outputs.build-status }}" = "success" ]; then
            echo "✅ **Overall Status:** SUCCESS"
          else
            echo "⚠️ **Overall Status:** DEGRADED"
          fi

      - name: 📧 Workflow Summary Report
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.code-quality.outputs.quality-score >= 80 && 'success' || 'failure' }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            📊 **CI/CD Workflow Summary**
            
            📈 **Metrics:**
            - Quality Score: ${{ needs.code-quality.outputs.quality-score }}/100
            - Security: ${{ needs.code-quality.outputs.security-status }}
            - Tests: ${{ needs.testing.outputs.test-results }}
            - Coverage: ${{ needs.testing.outputs.coverage-percentage }}%
            - Build: ${{ needs.build.outputs.build-status || 'skipped' }}
            - Deployment: ${{ needs.deployment.outputs.deployment-status || 'skipped' }}
            
            🌐 **Environment:** ${{ github.event.inputs.environment || 'staging' }}
            🔗 **Repository:** ${{ github.repository }}
            📝 **Commit:** ${{ github.sha }}
            
            ${{ needs.code-quality.outputs.quality-score >= 80 && '✅ Workflow completed successfully' || '⚠️ Workflow completed with issues' }}
