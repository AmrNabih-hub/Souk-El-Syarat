rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor';
    }
    
    function isCustomer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }
    
    function isOrderParticipant(orderData) {
      return isAuthenticated() && 
        (orderData.customerId == request.auth.uid || 
         orderData.vendorId == request.auth.uid || 
         isAdmin());
    }
    
    function isConversationParticipant(conversationData) {
      return isAuthenticated() && 
        (conversationData.participants[request.auth.uid] != null || 
         isAdmin());
    }
    
    // Products - Public read, restricted write
    match /products/{productId} {
      allow read: if true; // Public read for product catalog
      allow create: if isAuthenticated() && (isAdmin() || isVendor());
      allow update: if isAuthenticated() && 
        (isAdmin() || (isVendor() && resource.data.vendorId == request.auth.uid));
      allow delete: if isAdmin();
    }
    
    // Categories - Public read, admin write only
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users - Strict access control
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      // User subcollections
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      
      match /paymentMethods/{paymentId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Orders - Strict access control
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.vendorId == request.auth.uid || 
         isAdmin());
      allow create: if isAuthenticated() && isCustomer();
      allow update: if isAuthenticated() && 
        (resource.data.vendorId == request.auth.uid || isAdmin());
      allow delete: if false; // Orders should never be deleted
      
      // Order subcollections
      match /trackingEvents/{eventId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/orders/$(orderId)).data.customerId == request.auth.uid ||
           get(/databases/$(database)/documents/orders/$(orderId)).data.vendorId == request.auth.uid ||
           isAdmin());
        allow create: if isAuthenticated() && 
          (get(/databases/$(database)/documents/orders/$(orderId)).data.vendorId == request.auth.uid ||
           isAdmin());
        allow update, delete: if isAdmin();
      }
      
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          (get(/databases/$(database)/documents/orders/$(orderId)).data.customerId == request.auth.uid ||
           get(/databases/$(database)/documents/orders/$(orderId)).data.vendorId == request.auth.uid ||
           isAdmin());
      }
    }
    
    // Conversations - Strict access control
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        (resource.data.participants[request.auth.uid] != null || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.participants[request.auth.uid] != null || isAdmin());
      allow delete: if isAdmin();
      
      // Conversation messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[request.auth.uid] != null ||
           isAdmin());
        allow create: if isAuthenticated() && 
          (get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[request.auth.uid] != null ||
           isAdmin());
        allow update: if isAuthenticated() && 
          (resource.data.senderId == request.auth.uid || isAdmin());
        allow delete: if isAdmin();
      }
    }
    
    // Vendor applications - Strict access control
    match /vendorApplications/{applicationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && isCustomer();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Notifications - User can only access their own
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // System settings - Admin only
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics - Admin only
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}