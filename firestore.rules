rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor';
    }
    
    function isCustomer() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }

    // Users collection - Protected user data
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId) && 
                    request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
                    request.resource.data.role in ['customer', 'vendor'];
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin()) &&
                    (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'email']) || isAdmin());
      allow delete: if isAdmin();
    }

    // Products collection - Public read, vendor/admin write
    match /products/{productId} {
      allow read: if true; // Public read for marketplace browsing
      allow create: if isAuthenticated() && (isVendor() || isAdmin()) &&
                    request.resource.data.keys().hasAll(['title', 'price', 'category', 'vendorId', 'status']) &&
                    request.resource.data.vendorId == request.auth.uid;
      allow update: if isAuthenticated() && 
                    (resource.data.vendorId == request.auth.uid || isAdmin()) &&
                    (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['vendorId']) || isAdmin());
      allow delete: if isAuthenticated() && 
                    (resource.data.vendorId == request.auth.uid || isAdmin());
    }

    // Orders collection - Strict access control
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                  (resource.data.customerId == request.auth.uid || 
                   resource.data.vendorId == request.auth.uid || 
                   isAdmin());
      allow create: if isAuthenticated() && isCustomer() &&
                    request.resource.data.customerId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['customerId', 'items', 'totalAmount', 'status']);
      allow update: if isAuthenticated() && 
                    ((resource.data.customerId == request.auth.uid && 
                      request.resource.data.status in ['cancelled']) ||
                     (resource.data.vendorId == request.auth.uid && 
                      request.resource.data.status in ['confirmed', 'shipped', 'delivered']) ||
                     isAdmin());
      allow delete: if isAdmin();
    }

    // Reviews collection - Public read, customer write
    match /reviews/{reviewId} {
      allow read: if true; // Public reviews for transparency
      allow create: if isAuthenticated() && isCustomer() &&
                    request.resource.data.customerId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['customerId', 'productId', 'rating', 'comment']);
      allow update: if isAuthenticated() && 
                    (resource.data.customerId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
                    (resource.data.customerId == request.auth.uid || isAdmin());
    }

    // Messages collection - Private messaging security
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                  (resource.data.senderId == request.auth.uid || 
                   resource.data.receiverId == request.auth.uid || 
                   isAdmin());
      allow create: if isAuthenticated() &&
                    request.resource.data.senderId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['senderId', 'receiverId', 'content', 'timestamp']);
      allow update: if isAuthenticated() && 
                    (resource.data.senderId == request.auth.uid || isAdmin()) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'updatedAt']);
      allow delete: if isAuthenticated() && 
                    (resource.data.senderId == request.auth.uid || isAdmin());
    }

    // Notifications collection - User-specific access
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAdmin(); // Only system/admin creates notifications
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Analytics collection - Admin only for business intelligence
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // Vendor applications - Controlled approval process
    match /vendorApplications/{applicationId} {
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['userId', 'businessName', 'businessType', 'status']);
      allow update: if isAdmin(); // Only admin approves/rejects
      allow delete: if isAdmin();
    }

    // Personal data collections
    match /wishlists/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    match /carts/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
}
