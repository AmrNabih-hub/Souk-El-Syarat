rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/vendors/$(request.auth.uid)).data.role == 'vendor';
    }
    
    function isVendorOrAdmin() {
      return isVendor() || isAdmin();
    }
    
    function isValidProduct() {
      return request.resource.data.keys().hasAll(['title', 'price', 'vendorId']) &&
        request.resource.data.price > 0 &&
        request.resource.data.title.size() > 0;
    }
    
    function isValidOrder() {
      return request.resource.data.keys().hasAll(['customerId', 'items', 'total']) &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.total > 0;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'verified']);
      allow delete: if false; // Never allow deletion
    }
    
    // Vendors collection
    match /vendors/{vendorId} {
      allow read: if true; // Public vendor profiles
      allow create: if isOwner(vendorId);
      allow update: if isOwner(vendorId) || isAdmin();
      allow delete: if isAdmin();
      
      // Vendor private data
      match /private/{document=**} {
        allow read, write: if isOwner(vendorId) || isAdmin();
      }
    }
    
    // Vendor applications
    match /vendor_applications/{applicationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin() || 
        (isOwner(resource.data.userId) && resource.data.status == 'draft');
      allow delete: if false;
    }
    
    // Products collection
    match /products/{productId} {
      allow read: if true; // Public products
      allow create: if isVendor() && 
        request.auth.uid == request.resource.data.vendorId &&
        isValidProduct();
      allow update: if isVendor() && 
        request.auth.uid == resource.data.vendorId &&
        isValidProduct();
      allow delete: if (isVendor() && request.auth.uid == resource.data.vendorId) || isAdmin();
    }
    
    // Orders collection
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.customerId) || 
        isOwner(resource.data.vendorId) || 
        isAdmin();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.customerId &&
        isValidOrder();
      allow update: if isOwner(resource.data.customerId) ||
        isOwner(resource.data.vendorId) ||
        isAdmin();
      allow delete: if false; // Orders cannot be deleted
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public reviews
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.customerId &&
        exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId));
      allow update: if isOwner(resource.data.customerId) && 
        resource.data.createdAt == request.resource.data.createdAt; // Can't change creation time
      allow delete: if isOwner(resource.data.customerId) || isAdmin();
    }
    
    // Cart collection
    match /carts/{cartId} {
      allow read, write: if isOwner(cartId);
    }
    
    // Notifications collection
    match /notifications/{userId}/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAdmin() || isVendorOrAdmin();
      allow update: if isOwner(userId); // For marking as read
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Chat/Messages collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if false;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update: if false; // Messages are immutable
        allow delete: if false;
      }
    }
    
    // Analytics collection (read-only for users)
    match /analytics/{document=**} {
      allow read: if isVendorOrAdmin();
      allow write: if false; // Only server can write
    }
    
    // Payments collection (sensitive)
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.customerId) || 
        isOwner(resource.data.vendorId) || 
        isAdmin();
      allow create, update: if false; // Only server can write
      allow delete: if false;
    }
    
    // Wallets collection
    match /wallets/{walletId} {
      allow read: if isOwner(walletId) || isAdmin();
      allow create, update, delete: if false; // Only server can modify
    }
    
    // Support tickets
    match /support_tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if false;
    }
    
    // Sell car requests
    match /sell_car_requests/{requestId} {
      allow read: if isOwner(resource.data.customerId) || isAdmin();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.customerId;
      allow update: if isOwner(resource.data.customerId) || isAdmin();
      allow delete: if isOwner(resource.data.customerId) || isAdmin();
    }
    
    // Admin collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Audit logs (write-only for system, read for admin)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server can write
    }
    
    // System collections
    match /_system/{document=**} {
      allow read, write: if false; // Only server access
    }
  }
}