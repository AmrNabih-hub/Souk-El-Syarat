rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && 
        firestore.exists(/databases/(default)/documents/vendors/$(request.auth.uid));
    }
    
    // File validation
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 10 * 1024 * 1024; // 10MB max
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') &&
        request.resource.size < 25 * 1024 * 1024; // 25MB max
    }
    
    function isValidVideo() {
      return request.resource.contentType.matches('video/.*') &&
        request.resource.size < 100 * 1024 * 1024; // 100MB max
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile images
      allow write: if isOwner(userId) && isValidImage();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Vendor documents
    match /vendors/{vendorId}/documents/{fileName} {
      allow read: if isOwner(vendorId) || isAdmin();
      allow write: if isOwner(vendorId) && isValidDocument();
      allow delete: if isOwner(vendorId) || isAdmin();
    }
    
    // Product images
    match /products/{productId}/{fileName} {
      allow read: if true; // Public product images
      allow write: if isVendor() && isValidImage();
      allow delete: if isVendor() || isAdmin();
    }
    
    // Order attachments
    match /orders/{orderId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isValidImage() || isValidDocument());
      allow delete: if isAdmin();
    }
    
    // Chat attachments
    match /chats/{conversationId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidImage();
      allow delete: if false; // Chat attachments are permanent
    }
    
    // Vendor application documents
    match /applications/{applicationId}/{fileName} {
      allow read: if isOwner(applicationId.split('_')[0]) || isAdmin();
      allow write: if isOwner(applicationId.split('_')[0]) && 
        (isValidDocument() || isValidImage());
      allow delete: if isAdmin();
    }
    
    // Payment proofs
    match /payments/{paymentId}/{fileName} {
      allow read: if isAuthenticated() || isAdmin();
      allow write: if isAuthenticated() && isValidImage();
      allow delete: if false; // Payment proofs cannot be deleted
    }
    
    // Car sale images
    match /car_sales/{listingId}/{fileName} {
      allow read: if true; // Public car images
      allow write: if isAuthenticated() && isValidImage();
      allow delete: if isOwner(listingId.split('_')[0]) || isAdmin();
    }
    
    // System files (admin only)
    match /system/{fileName} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Temporary uploads (auto-deleted after 24 hours)
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
        request.resource.size < 50 * 1024 * 1024; // 50MB max
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Public assets
    match /public/{fileName} {
      allow read: if true;
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Backups (admin only)
    match /backups/{fileName} {
      allow read: if isAdmin();
      allow write: if false; // Only system can write backups
      allow delete: if isAdmin();
    }
  }
}